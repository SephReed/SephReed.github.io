_Seph: Can I get your email for the sake of asking you some questions about webgl?

bai: I'm really bad at responding to email, irc is your best bet for getting information out of me

_Seph: kk

_Seph: It’s a small poll I’m trying to spread around.

_Seph: What’s been the hardest part of your project so far?

bai: ah ok...let's see....well I partly still stick by the answer I gave before, that the hardest problem is how to get people to see your thing, but that's a web problem in general, not three.js specific...in the realm of three.js I'd say the hardest part has been asset loading and management

_Seph: as in the blinking texture loading you were talking about?

_Seph: or beyond that?

bai: getting my engine to the point where it can load new assets on the fly as smoothly as possible has been a huge chore, and there are a lot of limitations to the files I'm trying to use because the loaders are incomplete

bai: texture loading is part of it too yeah

bai: but yeah, beyond that.  loaders are kind of a hodgepodge, and I had to jump through a lot of hoops to make them all run in a worker thread, to reduce the amount of time it blocks my rendering

_Seph: a worker thread is like another tab that runs some other process right?

_Seph: because js is single threaded

_Seph: normally

bai: in a sense.  there's no tab involved, but it spawns a whole new limited execution context which loads up its own scripts, and can communicate with the main thread

bai: people generally think of it as a replacement for threading but it's really more like a multi-process sort of thing

_Seph: coolio.  did you use a script you found for that, or make your own?

bai: but essentially yeah it means running code simultaneously, across multiple CPU cores if the OS and hardware supports it

bai: made my own - web workers are built into html5 and all moder browsers support them, even IE

_Seph: still wierds me out tha promises (which are inherently asynchronous) don’t use multi core

_Seph: I’m pretty sure they don’t

_Seph: how many web workers do you have running?

bai: yeah - but if you've built something to use promises, then making your promise pass its workload off to a worker is much easier

bai: it's configurable, currently I have it sset at 8 for asset loading.  but that's probably a bit high

_Seph: do you have 8 cores?

bai: yes, on the system I tuned it for :)

bai: I bumped it up for a demo, normally I use 4

_Seph: so, for optimal use, it’d be nice to know the amount of cores a user has (/is willing to use)

bai: yes - but I'm not sure if that information is available to js

_Seph: I’m pondering a user database with info like this, along with normal player info stuff

_Seph: is there any other information you’d find really useful?

bai: hmm, hard question to answer, heh...I mean in the years I've spent in #three.js there's basically a few classes of problems, there's "how do I work with matrices and vectors and coordinate spaces", there's "how do I make things move around", "how do I tell when two things are touching", "how do I load my assets correctly"

_Seph: oh.

_Seph: that’s really good.

_Seph: I was speaking more in terms of user info in that case, but the list you gave is… well, I’ve had the same questions

bai: then on the more advanced side of things there's "how do I structure my app/game", at some point people get to the point where building on the example render loops doesn't work anymore

bai: well, each of those is a subject with a whole bunch of different questions

_Seph: indeed.  At some point I’d like to compile a few answers to those from different developers.

bai: none of them are entirely straightforward because the answer is usually "it depends what you're trying to do exactly" - but by asking a few basic questions you can normally narrow down what someone is looking for

_Seph: of all of the classes of problems, the one you’ve said that ails you is asset loading

_Seph: have you overcome all the others?

bai: I would say....mostly, not entirely.  I've been working on this stuff for years though, so I've had a lot of time to practice and use it across a few different engines

_Seph: good to know

bai: but for example I still don't have a collision detection solution I'm 100% happy with

bai: and there is no one size fits all solution to all problems

_Seph: bai, it’s been a while since I’ve been on this channel, I forget which project is yours

_Seph: I believe it’s the voxel cube one

bai: no, my main project is Elation Engine, the current flagship product for that is JanusWeb ( https://janusweb.metacade.com )

bai: also been working on VRcade/Metacade for a while

_Seph: Ah.  You’re working on the metaverse?

_Seph: This is exactly the project I’ve been thinking about

_Seph: For the time being, I’m just trying to put my feelers out on how devs are doing.

bai: you could call it a metaverse project yeah

_Seph: the connection from one webgl project to next is of a lot of interest to me

bai: I try not to use that term too much because it means a lot of things to a lot of people, but it's about as close a description as you can get :D

_Seph: I’m sure it’ll get a better name eventually

_Seph: like memerica or something

bai: haha

_Seph: pornopolis… wwwow

_Seph: wait no

_Seph: wowww

_Seph: world of world wide web

_Seph: in any case, the first couple of projects I think would help are a solid entry point

_Seph: some user profiling of hardware, username, friends, achievements, character styles, etc

_Seph: and perhaps finding a way to pay people for any solutions they find to current problems

bai: yeah these are big problems in general.  there's kind of a lack of good libraries to do a lot of the common stuff you need to do for 3d graphics - all the information is out there, but there are a lot of ways to do everything, so it's hard to find libraries that do what you want in a way that's compatible with how you're doing things

_Seph: so I’ve noticed.  It’s kind of inspiring actually.  Reminds me of the past.  The wild west of code.

_Seph: But eventually a standard will arise, and I’m hoping I can influence that standard to be open source

_Seph: by jumping on the ball before it becomes an industry, I think that might be possible.

_Seph: did you do your own physics?  What are your thoughts on cannon js?  It’s seeming like a pretty solid piece of work.